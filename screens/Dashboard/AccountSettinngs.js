import React from "react";
import { Pressable, Text, View } from "react-native";
import { SvgXml } from "react-native-svg";
import { useDispatch, useSelector } from "react-redux";
import { setIsBn } from "../../data/isBn";
import { setIsDark } from "../../data/isDark";
import { AppColors } from "../../functions/colors";
import localStorage from "../../functions/localStorage";
import { AppValues } from "../../functions/values";

export default function AccountSettings({navigation}) {
  const isBn = useSelector((state) => state.isBn);
  const isDark = useSelector((state) => state.isDark);
  const values = new AppValues(isBn);
  const colors = new AppColors(isDark);
  const dispatch = useDispatch();

  const dark = `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M5.05772 0.16756C3.99786 0.607347 3.13463 1.19706 2.31807 2.03666C1.0449 3.34603 0.294994 4.90195 0.0483584 6.7444C-0.0182998 7.24082 -0.0149669 8.29698 0.0516913 8.8134C0.368318 11.2222 1.66149 13.3046 3.6779 14.6473C4.85775 15.4369 6.34756 15.9233 7.76071 15.9899C9.27385 16.0566 10.5737 15.7934 11.8669 15.157C12.7001 14.7472 13.2933 14.3274 13.9633 13.6777C14.8098 12.8548 15.4164 11.9652 15.8464 10.9057C16.0597 10.3826 16.053 10.1194 15.813 9.93286C15.6197 9.7796 15.5064 9.7796 15.0065 9.9262C14.1632 10.1694 13.67 10.2427 12.8667 10.2427C11.7435 10.2427 10.8037 10.0228 9.78379 9.53305C8.33064 8.83006 7.16079 7.66395 6.46754 6.22798C5.97427 5.19847 5.7543 4.25559 5.7543 3.1328C5.7543 2.32985 5.82763 1.83676 6.07093 0.993829C6.21758 0.494069 6.21758 0.38079 6.06426 0.18755C5.87429 -0.055666 5.60432 -0.0623302 5.05772 0.16756ZM4.78442 1.60687C4.67777 2.07331 4.62444 2.9862 4.66777 3.60591C4.80442 5.62827 5.59099 7.42407 6.96748 8.84339C8.19732 10.1094 9.71713 10.9091 11.5236 11.2356C11.9102 11.3055 12.0435 11.3122 12.9167 11.3089C13.6333 11.3055 13.9566 11.2922 14.1666 11.2556C14.3232 11.2256 14.4565 11.2089 14.4632 11.2156C14.4832 11.2356 14.1666 11.732 13.9199 12.0618C12.7934 13.5711 11.037 14.594 9.14054 14.8438C8.70393 14.9005 7.84404 14.9105 7.43409 14.8605C6.65419 14.7639 5.85096 14.534 5.16104 14.2008C2.93466 13.1347 1.43485 11.0357 1.13489 8.56352C1.08489 8.15372 1.09489 7.29413 1.15155 6.85767C1.42818 4.74203 2.65803 2.83294 4.46113 1.71348C4.62111 1.61686 4.76109 1.53357 4.77776 1.53357C4.79109 1.53357 4.79442 1.56689 4.78442 1.60687Z" fill="${colors.getTextColor()}"/>
  </svg>
  `;
  const right = `<svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M0.991541 11.0649L0.992658 11.0658C1.14848 11.1946 1.33984 11.25 1.52179 11.25C1.71073 11.25 1.8968 11.1849 2.04436 11.0711L2.04444 11.0712L2.05093 11.0658L6.59914 7.30668C6.59945 7.30643 6.59976 7.30618 6.60007 7.30592C7.01573 6.96858 7.25 6.5018 7.25 5.99928C7.25 5.49427 7.00668 5.0287 6.60098 4.69338L2.05093 0.93275C1.75611 0.689083 1.28747 0.689083 0.992658 0.93275L0.992655 0.932746L0.991541 0.933678C0.844379 1.05675 0.75 1.23402 0.75 1.43115C0.75 1.62827 0.844379 1.80554 0.991541 1.92862L0.991538 1.92862L0.992658 1.92954L5.54271 5.69018C5.65725 5.78484 5.70321 5.89781 5.70321 5.99928C5.70321 6.10075 5.65725 6.21371 5.54271 6.30838L0.992658 10.069L0.992655 10.069L0.991541 10.0699C0.84438 10.193 0.75 10.3703 0.75 10.5674C0.75 10.7645 0.844379 10.9418 0.991541 11.0649Z" fill="" stroke="${colors.getTextColor()}" stroke-width="0.5"/>
  </svg>
  `;
  const darkLang = `<svg width="20" height="17" viewBox="0 0 20 17" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M2.26563 0.589858C1.90625 0.710952 1.65625 0.867202 1.39844 1.12892C1.15235 1.38283 0.933598 1.78908 0.863286 2.13283C0.835942 2.27345 0.820317 3.25001 0.820317 5.10158C0.820317 8.10548 0.816411 8.0547 1.04297 8.53126C1.19532 8.85158 1.57813 9.24611 1.91016 9.42189C2.19532 9.57033 2.55469 9.6797 2.76172 9.6797H2.89063V10.1563C2.89063 10.7422 2.92969 10.8867 3.13282 11.1094C3.41016 11.4102 3.8711 11.4727 4.20704 11.2539C4.30079 11.1914 4.55469 10.8906 4.89844 10.418L5.44141 9.6797H6.46875H7.5V11.1953C7.5 12.8438 7.51172 12.9688 7.72657 13.3672C7.85938 13.6211 8.32422 14.0938 8.55469 14.211C8.64844 14.2578 8.82422 14.336 8.94532 14.3828C9.15625 14.461 9.22657 14.4649 11.6797 14.4766L14.1992 14.4883L14.9805 15.2656C15.4805 15.7617 15.8125 16.0664 15.9063 16.1055C16.2422 16.2422 16.6797 16.1406 16.9023 15.875C17.0703 15.668 17.1094 15.4961 17.1094 14.9649V14.5L17.4453 14.4375C17.9063 14.3516 18.2344 14.1797 18.5508 13.8633C18.8477 13.5703 19.0313 13.2461 19.1211 12.8789C19.207 12.5078 19.207 7.2422 19.1211 6.87111C18.9883 6.31642 18.543 5.75001 18.0469 5.50783C17.5703 5.27345 17.4883 5.26564 14.875 5.26564H12.5V3.7383V2.21486L12.4023 1.91798C12.1719 1.2383 11.6406 0.734389 10.957 0.554702C10.8008 0.511733 9.95313 0.500014 6.64063 0.500014L2.51954 0.503921L2.26563 0.589858ZM10.8477 1.44533C11.1484 1.55861 11.4414 1.85158 11.5547 2.15236C11.6367 2.3672 11.6406 2.43751 11.6406 3.82033V5.25783L10.4023 5.27345C9.24219 5.28908 9.14454 5.29689 8.92969 5.37501C8.80079 5.42189 8.6211 5.50392 8.52735 5.55861L8.35938 5.66017L8.26954 5.45314C7.54297 3.81642 7.04297 2.76955 6.94922 2.6758C6.86719 2.60158 6.79297 2.57033 6.6875 2.57033C6.36719 2.57033 6.40625 2.50392 5.22266 5.1133C4.03125 7.7383 4.0586 7.65626 4.28125 7.89064C4.42188 8.03517 4.70704 8.04689 4.85938 7.91017C4.91797 7.85939 5.09375 7.52345 5.28516 7.10158L5.61329 6.37892L6.67579 6.3672C7.25782 6.3633 7.73438 6.3672 7.73438 6.37892C7.73438 6.39064 7.70704 6.45705 7.66797 6.52736C7.52735 6.8008 7.5 7.02345 7.5 7.9297V8.82033H6.27735C5.25391 8.82033 5.04297 8.82814 4.97266 8.87892C4.92579 8.91017 4.63672 9.28126 4.32813 9.69923L3.76954 10.4649L3.75 9.75001C3.73829 9.35548 3.71485 9.01173 3.69922 8.98439C3.62891 8.87892 3.44141 8.82814 3.04688 8.81251C2.53516 8.78908 2.3086 8.69923 2.03907 8.41408C1.67969 8.03517 1.69922 8.21095 1.69922 5.07033V2.31642L1.82813 2.0547C1.97266 1.75783 2.19141 1.5508 2.48829 1.43751C2.66797 1.3672 2.85938 1.3633 6.64844 1.35939H10.6211L10.8477 1.44533ZM7.00782 4.81251C7.17188 5.1758 7.30079 5.48048 7.29297 5.4883C7.28516 5.49611 6.9961 5.49611 6.64844 5.4922L6.02344 5.48048L6.33985 4.78517C6.51172 4.40236 6.66797 4.10548 6.6836 4.12111C6.69922 4.13673 6.84375 4.44923 7.00782 4.81251ZM17.5664 6.25783C17.8477 6.38673 18.0898 6.62501 18.2148 6.89845C18.3008 7.08205 18.3008 7.09376 18.3008 9.87501V12.668L18.1914 12.8906C18.0625 13.1524 17.8398 13.3633 17.5547 13.4961C17.3867 13.5703 17.2539 13.5977 16.9063 13.6133C16.4922 13.6367 16.4609 13.6445 16.3594 13.7461L16.25 13.8516V14.5703V15.2852L15.4297 14.4649L14.6094 13.6445L11.9805 13.625C9.01172 13.6016 9.15625 13.6172 8.78907 13.2852C8.67969 13.1875 8.54297 13.0156 8.48438 12.9063L8.37891 12.707V9.87501V7.04298L8.48438 6.84767C8.67579 6.48439 9.01563 6.23048 9.41407 6.16408C9.51172 6.14845 11.3281 6.13673 13.457 6.14064L17.3242 6.14455L17.5664 6.25783Z" fill="${colors.getTextColor()}"/>
  </svg>
  `;
  const out = `<svg width="20" height="18" viewBox="0 0 20 18" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M4.16667 15.75C3.70833 15.75 3.31583 15.603 2.98917 15.309C2.6625 15.015 2.49945 14.662 2.5 14.25V3.75C2.5 3.3375 2.66333 2.98425 2.99 2.69025C3.31667 2.39625 3.70889 2.2495 4.16667 2.25H10V3.75H4.16667V14.25H10V15.75H4.16667ZM13.3333 12.75L12.1875 11.6625L14.3125 9.75H7.5V8.25H14.3125L12.1875 6.3375L13.3333 5.25L17.5 9L13.3333 12.75Z" fill="${colors.getTextColor()}"/>
  </svg>
  `;

  return (
    <View style={{ flex: 1, backgroundColor: colors.getBackgroundColor() }}>
      <View
        style={{
          marginHorizontal: 20,
          borderWidth: 1,
          borderColor: colors.getShadowColor(),
          borderRadius: 6,
          paddingLeft: 12,
        }}>
        <BTN
          onPress={() => {
            localStorage.setDark(isDark ? false : true);
            dispatch(setIsDark(isDark ? false : true));
          }}
          icon={dark}
          textColor={colors.getTextColor()}
          borderColor={colors.getShadowColor()}
          text={
            !isDark
              ? values.createCommitteeValues().darkMode
              : values.createCommitteeValues().lightMode
          }
        />
        <BTN
          onPress={async () => {
            if (isBn) {
              dispatch(setIsBn( false));
              await localStorage.setBn(false);
            } else {
              dispatch(setIsBn(true));
              await localStorage.setBn(true);
            }
          }}
          icon={darkLang}
          textColor={colors.getTextColor()}
          borderColor={colors.getShadowColor()}
          text={!isBn ? "বাংলা" : "English"}
        />
        <BTN onPress={()=>{
           localStorage.comityLogOut();
           dispatch({ type: "SET_COMITY", value: null });
           navigation.navigate("Dashboard");
        }}
          icon={out}
          textColor={colors.getTextColor()}
          borderColor={colors.getShadowColor()}
          text={values.createCommitteeValues().logout}
        />
        <BTN onPress={()=>{
          navigation.navigate("DeleteComity");
        }}
          icon={right}
          textColor={colors.getTextColor()}
          borderColor={colors.getShadowColor()}
          w
          text={values.createCommitteeValues().deleteComity}
        />
      </View>
    </View>
  );
}
const BTN = ({ borderColor, text, icon, textColor, w, onPress }) => {
  return (
    <Pressable
      onPress={onPress}
      style={{
        borderBottomWidth: w ? 0 : 1,
        borderBottomColor: borderColor,
        flexDirection: "row",
        justifyContent: "space-between",
        paddingVertical: 16,
        paddingRight: 12,
      }}>
      <Text
        style={{
          color: textColor,
        }}>
        {text}
      </Text>
      <SvgXml xml={icon} />
    </Pressable>
  );
};
